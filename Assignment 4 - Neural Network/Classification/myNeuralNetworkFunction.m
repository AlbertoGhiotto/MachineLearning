function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-Dec-2019 20:09:24.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 9xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 2xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
x1_step1.gain = [2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.84377222043392619;-0.68325516306343769823;1.1598272261377899905;0.85757692673885743684;0.1368995372417255163;0.084239903878002633797;0.6860079571187093217;1.0602012391883461895;1.7292520090147187606;2.095338110804148446];
IW1_1 = [-1.0827992537740014356 -0.89031812246936892219 0.32765367032037195916 0.29523244422203637205 -0.63948034209503235026 0.50154784702894206205 0.53472509172732529681 -0.7022360215641493264 0.27134573111794163536;0.86609607080638584264 -0.52323301062732741062 -0.46643191608326178832 -0.12831771520367940553 -1.4341246416097388483 1.1142620250882409039 0.73069030427007120032 0.40548396348726539751 -0.28898565097088935172;-0.08690175994180188157 -1.1140916243220404525 0.23154226901932994931 0.61782109786762651193 0.10194116266558135575 0.3485324083098496617 1.1077142676018694178 0.51854252075455076199 0.01273924398298642395;-0.39300060996543101366 -0.17212695021400897799 1.1207824199001512611 -0.1786757932255436665 -0.4684570815839750324 0.6781194595216620824 -0.13300814863138393784 0.59168894526881843365 -0.3338125538615387411;-0.45891575366202991271 0.44281184025144698646 0.3900263229790111863 -0.86978148836080471096 1.0431177527241153324 0.097481994260741805514 0.083621824996829741128 0.8147633493189747611 0.53420728293550201471;0.71444394107225117629 0.51525444301384504264 0.66664616921603614408 0.090506850361480872813 0.92938726737796872879 -0.81384715799615281462 0.79688691696871261083 -0.2645568039919288239 1.0795126276515394359;0.70488511315455160133 0.64421316090260216658 -0.2518907351023834118 -0.40509736854101491277 -0.58436735867740530193 -0.029787911190951282814 0.83230130064293517123 0.41165600077941366663 1.0427095997139679273;0.57536687781541639986 0.2737895795567077406 -0.055566308516363197012 0.79028886882597770835 0.59656939067684855438 0.7332320914139164314 0.41048567800066959599 -1.0969677993339146393 0.43570377829349626886;0.54651057607121300563 -0.92080738504115544618 0.033321177113193663211 0.72761071238851737775 0.72703780894450287242 0.60948943376338871047 -0.41237786590644509577 0.8604677907209528076 0.25858956617205602901;0.88611436718091740605 1.0901088755725927282 -0.026104644848805896862 0.49560530908548799944 0.1600972210348901581 0.69408182339775392755 0.19559022728164385252 1.0165686488154854761 -0.63588618265464469381];

% Layer 2
b2 = [-0.14269679177468658215;0.5114304928389675764];
LW2_1 = [0.85680672591854289966 -0.6545724811693300893 0.28954573987130804991 -0.34236131903089800366 0.022158755978468971243 -1.2006410355164542914 -0.6015898256987277648 -0.02006074885427536203 -0.84204640999127744472 -0.48433873554627410174;-0.15659259554283480598 0.86521914111541842196 1.0005979536757416692 0.25871372798505581914 -0.44796895934331543154 0.56585178426146021113 0.60169807023488386388 1.4656162471803868552 0.61790532154764588046 1.5426871230911372024];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
    
    % Output 1
    Y{1,ts} = a2;
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
