function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 01-Dec-2019 19:55:21.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [133;8139;4472;370;1.46;385;551;421062];
x1_step1.gain = [0.0526315789473684;0.000641848523748395;0.00053134962805526;0.0714285714285714;1.06382978723404;0.0571428571428571;0.0487804878048781;5.05183179420858e-06];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.1780133702656125916;0.89591752216924602781;0.35523508498486267015;-2.7495478308011471746;-3.9879115575439607611;-0.41741262814201096631;2.7230653282407626392;-0.38092899681498715303;1.7021611330899391046;-1.1684237296157071739];
IW1_1 = [2.3170698746262394785 1.1403795519263286717 0.78838072157946570417 3.8730659723436078323 -3.7607684296267751556 2.4503707864692914065 7.6256979419149137911 -5.5910496449417506071;-4.4688382900074818949 1.5967465577096096041 2.2594963546528941123 -1.8668546588788352825 3.3004731585398960902 -2.856723793885316276 3.6488140489105802544 0.32817561543143947134;-0.209746180930819065 -0.89288186088676058105 2.1760180517289793301 -0.17583312733344427792 -5.3722049700373499803 -0.67234549655791708833 -0.78487255789040655252 -1.5211878141504275863;3.991838738980022061 -0.72849615744371021275 0.15878927678383786271 -2.0885328181491482624 -1.4301904508052833975 -2.4824275016069874411 -0.22436416941665193736 -3.3141288163334436945;-1.0701123308285021007 0.47680271614981439843 -0.1018704651584593085 -4.2725439725042724248 -2.708514901091136462 4.5993520784173052007 0.17457324466054546797 1.3469161648146614763;0.62785603375101817214 0.78530283957714042131 1.064625337786362147 -0.28587895879461461268 -1.2028351340506977518 0.12301265961162030638 -1.821164032347420525 -0.060011699740357832278;-1.0069783399894811637 -2.2888074101750817135 1.1934970786254777142 3.1747387605980041947 1.8575906257137417832 -4.6740960398708635282 -2.2430712121727371944 0.85348994734993866018;-0.48510799995654307892 0.44000540888996186872 -0.074922672793977504457 -0.27958511380401096513 -0.023446894572412328717 -0.2716249456600496881 -0.15939928014239940213 -0.014621109963035130996;-0.66336902283960497151 -0.50932255934160586275 0.2886480361622920654 -0.29415086931028266992 2.2753500091736640343 -0.22910038308794244966 2.8715182957390883445 -0.89282232622731660943;1.0481255282449557509 -2.2931363970743534608 -1.1954343175725232751 -1.1016934835060636644 4.4548701573087310379 0.19693115535066813004 2.6487119746345655358 -4.3573022812609085719];

% Layer 2
b2 = -0.22833656148808439967;
LW2_1 = [0.055640310120739354394 0.072522695055003805198 -0.16715990034805472408 -0.090950052811342024794 -0.076807893563523230163 0.34528552121998362656 -0.049151045988370445361 -0.87980143605437033383 0.25779056172692610405 0.11197888825578361516];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.0476190476190476;
y1_step1.xoffset = 485;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
